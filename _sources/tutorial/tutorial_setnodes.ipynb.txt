{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# SetNode\n",
    "The SetNode class in Geomapi represents the data and metadata captured within a single epoch. The data itself can consist of various remote sensing inputs (point clouds, meshes, etc.) and mostly builds upon OPEN3D. The metadata of the SetNode consists of the overarching properties and builds upon the RDFlib framework:\n",
    "\n",
    "[http://www.open3d.org/docs/latest/tutorial/Basic/mesh.html#](http://www.open3d.org/docs/latest/tutorial/Basic/mesh.html#) \n",
    "\n",
    "[https://rdflib.readthedocs.io/](https://rdflib.readthedocs.io/)\n",
    "\n",
    "The code below shows how to create a SetNode from various inputs. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First the geomapi and external packages are imported"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Jupyter environment detected. Enabling Open3D WebVisualizer.\n",
      "[Open3D INFO] WebRTC GUI backend enabled.\n",
      "[Open3D INFO] WebRTCWindowSystem: HTTP handshake server disabled.\n"
     ]
    }
   ],
   "source": [
    "#IMPORT PACKAGES\n",
    "from rdflib import Graph\n",
    "import os\n",
    "import numpy as np\n",
    "\n",
    "#IMPORT MODULES\n",
    "from context import geomapi #context import for documentation only\n",
    "from geomapi.nodes import SetNode"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SetNode Creation\n",
    "\n",
    "A SetNode is constructed using the same parameters as the base Node. Please refer to [Node Tutorial](../tutorial/tutorial_nodes.ipynb) For more info about Node Creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SetNode( subject = None,             # (URIRef, optional) : A subject to use as identifier for the Node.\n",
    "         graph = None,               # (Graph, optional) : An RDF Graph to parse.\n",
    "         graphPath = None,           # (Path, optional) : The path of an RDF Graph to parse.\n",
    "         name = None,                # (str, optional) : A name of the Node.\n",
    "         path = None,                # (Path, optional) : A filepath to a resource.\n",
    "         timestamp = None,           # (str, optional) : Timestamp for the node.\n",
    "         resource = None,            # (optional) : Resource associated with the node.\n",
    "         cartesianTransform = None,  # (np.ndarray, optional) : The (4x4) transformation matrix.\n",
    "         orientedBoundingBox = None, # (o3d.geometry.OrientedBoundingBox, optional) : The oriented bounding box of the node.\n",
    "         convexHull = None,          # (o3d.geometry.TriangleSet, optional) : The convex hull of the node.\n",
    "         loadResource = False,       # Load the resource at initialization?\n",
    "         linkedNodes = None,         # (List[Node], optional) : A list of geomapi.Node linked to this set\n",
    "         linkedSubjects = None       # (List[RDFLiteral], optional) : A list of subjects linked to this set\n",
    "        )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ontology link\n",
    "\n",
    "The SetNode has 1 new standard property that is serialized to the graph:\n",
    "\n",
    "| python name | predicate |\n",
    "|-----------  |-----------|\n",
    "| `linkedSubjects` | `geomapi:hasPart` |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creation from RDF Graph\n",
    "\n",
    "A SetNode can be created directly from a graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "[rdflib.term.URIRef('http://resources#parking_mesh'), rdflib.term.URIRef('http://resources#DJI_0085'), rdflib.term.URIRef('http://resources#IMG_8834'), rdflib.term.URIRef('http://resources#parking_pcd'), rdflib.term.URIRef('http://resources#Basic_Wall_168_WA_f2_Soilmix_600mm_956569_06v1k9ENv8DhGMCvKUuLQV'), rdflib.term.URIRef('http://resources#Floor_232_FL_Concrete_CIP_450mm-naspanning_1035905_2qZtnImXH6Tgdb58DjNlmF')]\n"
     ]
    }
   ],
   "source": [
    "import geomapi.tools as tl\n",
    "\n",
    "nodes = tl.graph_to_nodes(graphPath = r\"../../..\\tests\\testfiles\\graphs\\resources_graph.ttl\")\n",
    "setNode = SetNode(linkedNodes=nodes)\n",
    "print(setNode.linkedSubjects)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SetNode Transformation\n",
    "\n",
    "Since every nod has a cartesian transform, it can be transformed using the `node.transform()` function.\n",
    "\n",
    "The transformation also updates the `convexHull` and `orientedBoundingBox`.\n",
    "\n",
    "Furthermore, if the SetNode has a resource, that resource is also transformed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]\n",
      " [0. 0. 0. 1.]]\n",
      "applying transformation: (-1)\n",
      "[[0. 0. 1. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [1. 0. 0. 0.]\n",
      " [0. 0. 0. 1.]] \n",
      "\n",
      "applying rotation: (90,0,0)\n",
      "[[ 1.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00]\n",
      " [ 0.000000e+00  6.123234e-17 -1.000000e+00  0.000000e+00]\n",
      " [ 0.000000e+00  1.000000e+00  6.123234e-17  0.000000e+00]\n",
      " [ 0.000000e+00  0.000000e+00  0.000000e+00  1.000000e+00]] \n",
      "\n",
      "applying translation: (1,2,3)\n",
      "[[1. 0. 0. 1.]\n",
      " [0. 1. 0. 2.]\n",
      " [0. 0. 1. 3.]\n",
      " [0. 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "node = SetNode()\n",
    "print(node.cartesianTransform)\n",
    "transformation = np.array([[0,0,1,0],[0,1,0,0],[1,0,0,0],[0,0,0,1]])\n",
    "node.transform(transformation=transformation)\n",
    "print(\"applying transformation: (-1)\")\n",
    "print(node.cartesianTransform,\"\\n\")\n",
    "\n",
    "node = SetNode()\n",
    "rotation = np.array([90,0,0]) #eulers in degrees\n",
    "node.transform(rotation=rotation)\n",
    "print(\"applying rotation: (90,0,0)\")\n",
    "print(node.cartesianTransform,\"\\n\")\n",
    "\n",
    "node = SetNode()\n",
    "translation = np.array([1,2,3])\n",
    "node.transform(translation=translation)\n",
    "print(\"applying translation: (1,2,3)\")\n",
    "print(node.cartesianTransform)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SetNode Visualisation\n",
    "\n",
    "When a SetNode has a linkedNodes, the `show()` function displays the all the 3D representations of the nodes using open3d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "Resource not loaded, but path is defined, call `load_resource()` to access it.\n",
      "No path is defined, unable to load resource\n",
      "No path is defined, unable to load resource\n",
      "parking\n",
      "C:\\Users\\jelle\\Documents\\DoctoraatLocal\\geomapi\\tests\\testfiles\\mesh\\parking.obj\n",
      "DJI_0085\n",
      "C:\\Users\\jelle\\Documents\\DoctoraatLocal\\geomapi\\tests\\testfiles\\img\\DJI_0085.JPG\n",
      "IMG_8834\n",
      "C:\\Users\\jelle\\Documents\\DoctoraatLocal\\geomapi\\tests\\testfiles\\img\\IMG_8834.JPG\n",
      "parking\n",
      "C:\\Users\\jelle\\Documents\\DoctoraatLocal\\geomapi\\tests\\testfiles\\pcd\\parking.pcd\n",
      "Basic Wall:168_WA_f2_Soilmix 600mm:956569\n",
      "None\n",
      "Floor:232_FL_Concrete CIP 450mm-naspanning:1035905\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "import geomapi.tools as tl\n",
    "nodes = tl.graph_to_nodes(graphPath = r\"../../..\\tests\\testfiles\\graphs\\resources_graph.ttl\", loadResource = True, focalLength35mm = 50)\n",
    "setNode = SetNode(linkedNodes=nodes)\n",
    "for node in setNode.linkedNodes:\n",
    "    print(node.name)\n",
    "    print(node.path)\n",
    "    #node.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Open3D WARNING] [AddGeometry] Invalid pointer. Possibly a null pointer or None was passed in.\n",
      "[Open3D WARNING] [AddGeometry] Invalid pointer. Possibly a null pointer or None was passed in.\n"
     ]
    }
   ],
   "source": [
    "setNode.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Further reading\n",
    "\n",
    "Please refer to the full [API documentation](../geomapi/geomapi.nodes.setnode.rst) of the SetNode class for more details about the functionality"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
